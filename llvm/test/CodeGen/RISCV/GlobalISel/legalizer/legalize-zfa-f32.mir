# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5

# RUN: llc -mtriple=riscv32 -mattr=+zfa -run-pass=legalizer -o - %s\
# RUN: | FileCheck %s --check-prefixes=CHECK-ZFA
# RUN: llc -mtriple=riscv32 -mattr=+f -run-pass=legalizer -o - %s\
# RUN: | FileCheck %s --check-prefixes=CHECK-F-ONLY
# RUN: llc -mtriple=riscv64 -mattr=+zfa -run-pass=legalizer -o - %s\
# RUN: | FileCheck %s --check-prefixes=CHECK-ZFA
# RUN: llc -mtriple=riscv64 -mattr=+f -run-pass=legalizer -o - %s\
# RUN: | FileCheck %s --check-prefixes=CHECK-F-ONLY


---
name:            FCEIL
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $f10_f

    ; CHECK-ZFA-LABEL: name: FCEIL
    ; CHECK-ZFA: liveins: $f10_f
    ; CHECK-ZFA-NEXT: {{  $}}
    ; CHECK-ZFA-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-ZFA-NEXT: [[FCEIL:%[0-9]+]]:_(s32) = G_FCEIL [[COPY]]
    ; CHECK-ZFA-NEXT: $f10_f = COPY [[FCEIL]](s32)
    ; CHECK-ZFA-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-F-ONLY-LABEL: name: FCEIL
    ; CHECK-F-ONLY: liveins: $f10_f
    ; CHECK-F-ONLY-NEXT: {{  $}}
    ; CHECK-F-ONLY-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoCALL target-flags(riscv-call) &ceilf, csr_ilp32f_lp64f, implicit-def $x1, implicit $f10_f, implicit-def $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY1]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoRET implicit $f10_f
    %0:_(s32) = COPY $f10_f
    %1:_(s32) = G_FCEIL %0
    $f10_f = COPY %1
    PseudoRET implicit $f10_f

...
---
name:            FFLOOR
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $f10_f

    ; CHECK-ZFA-LABEL: name: FFLOOR
    ; CHECK-ZFA: liveins: $f10_f
    ; CHECK-ZFA-NEXT: {{  $}}
    ; CHECK-ZFA-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-ZFA-NEXT: [[FFLOOR:%[0-9]+]]:_(s32) = G_FFLOOR [[COPY]]
    ; CHECK-ZFA-NEXT: $f10_f = COPY [[FFLOOR]](s32)
    ; CHECK-ZFA-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-F-ONLY-LABEL: name: FFLOOR
    ; CHECK-F-ONLY: liveins: $f10_f
    ; CHECK-F-ONLY-NEXT: {{  $}}
    ; CHECK-F-ONLY-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoCALL target-flags(riscv-call) &floorf, csr_ilp32f_lp64f, implicit-def $x1, implicit $f10_f, implicit-def $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY1]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoRET implicit $f10_f
    %0:_(s32) = COPY $f10_f
    %1:_(s32) = G_FFLOOR %0
    $f10_f = COPY %1
    PseudoRET implicit $f10_f

...
---
name:            FRINT
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $f10_f

    ; CHECK-ZFA-LABEL: name: FRINT
    ; CHECK-ZFA: liveins: $f10_f
    ; CHECK-ZFA-NEXT: {{  $}}
    ; CHECK-ZFA-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-ZFA-NEXT: [[FRINT:%[0-9]+]]:_(s32) = G_FRINT [[COPY]]
    ; CHECK-ZFA-NEXT: $f10_f = COPY [[FRINT]](s32)
    ; CHECK-ZFA-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-F-ONLY-LABEL: name: FRINT
    ; CHECK-F-ONLY: liveins: $f10_f
    ; CHECK-F-ONLY-NEXT: {{  $}}
    ; CHECK-F-ONLY-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoCALL target-flags(riscv-call) &rintf, csr_ilp32f_lp64f, implicit-def $x1, implicit $f10_f, implicit-def $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY1]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoRET implicit $f10_f
    %0:_(s32) = COPY $f10_f
    %1:_(s32) = G_FRINT %0
    $f10_f = COPY %1
    PseudoRET implicit $f10_f

...
---
name:            FNEARBYINT
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $f10_f

    ; CHECK-ZFA-LABEL: name: FNEARBYINT
    ; CHECK-ZFA: liveins: $f10_f
    ; CHECK-ZFA-NEXT: {{  $}}
    ; CHECK-ZFA-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-ZFA-NEXT: [[FNEARBYINT:%[0-9]+]]:_(s32) = G_FNEARBYINT [[COPY]]
    ; CHECK-ZFA-NEXT: $f10_f = COPY [[FNEARBYINT]](s32)
    ; CHECK-ZFA-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-F-ONLY-LABEL: name: FNEARBYINT
    ; CHECK-F-ONLY: liveins: $f10_f
    ; CHECK-F-ONLY-NEXT: {{  $}}
    ; CHECK-F-ONLY-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoCALL target-flags(riscv-call) &nearbyintf, csr_ilp32f_lp64f, implicit-def $x1, implicit $f10_f, implicit-def $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY1]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoRET implicit $f10_f
    %0:_(s32) = COPY $f10_f
    %1:_(s32) = G_FNEARBYINT %0
    $f10_f = COPY %1
    PseudoRET implicit $f10_f

...
---
name:            INTRINSIC_TRUNC
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $f10_f

    ; CHECK-ZFA-LABEL: name: INTRINSIC_TRUNC
    ; CHECK-ZFA: liveins: $f10_f
    ; CHECK-ZFA-NEXT: {{  $}}
    ; CHECK-ZFA-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-ZFA-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(s32) = G_INTRINSIC_TRUNC [[COPY]]
    ; CHECK-ZFA-NEXT: $f10_f = COPY [[INTRINSIC_TRUNC]](s32)
    ; CHECK-ZFA-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-F-ONLY-LABEL: name: INTRINSIC_TRUNC
    ; CHECK-F-ONLY: liveins: $f10_f
    ; CHECK-F-ONLY-NEXT: {{  $}}
    ; CHECK-F-ONLY-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoCALL target-flags(riscv-call) &truncf, csr_ilp32f_lp64f, implicit-def $x1, implicit $f10_f, implicit-def $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY1]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoRET implicit $f10_f
    %0:_(s32) = COPY $f10_f
    %1:_(s32) = G_INTRINSIC_TRUNC %0
    $f10_f = COPY %1
    PseudoRET implicit $f10_f

...
---
name:            INTRINSIC_ROUND
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $f10_f

    ; CHECK-ZFA-LABEL: name: INTRINSIC_ROUND
    ; CHECK-ZFA: liveins: $f10_f
    ; CHECK-ZFA-NEXT: {{  $}}
    ; CHECK-ZFA-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-ZFA-NEXT: [[INTRINSIC_ROUND:%[0-9]+]]:_(s32) = G_INTRINSIC_ROUND [[COPY]]
    ; CHECK-ZFA-NEXT: $f10_f = COPY [[INTRINSIC_ROUND]](s32)
    ; CHECK-ZFA-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-F-ONLY-LABEL: name: INTRINSIC_ROUND
    ; CHECK-F-ONLY: liveins: $f10_f
    ; CHECK-F-ONLY-NEXT: {{  $}}
    ; CHECK-F-ONLY-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoCALL target-flags(riscv-call) &roundf, csr_ilp32f_lp64f, implicit-def $x1, implicit $f10_f, implicit-def $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY1]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoRET implicit $f10_f
    %0:_(s32) = COPY $f10_f
    %1:_(s32) = G_INTRINSIC_ROUND %0
    $f10_f = COPY %1
    PseudoRET implicit $f10_f

...
---
name:            INTRINSIC_ROUNDEVEN
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $f10_f

    ; CHECK-ZFA-LABEL: name: INTRINSIC_ROUNDEVEN
    ; CHECK-ZFA: liveins: $f10_f
    ; CHECK-ZFA-NEXT: {{  $}}
    ; CHECK-ZFA-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-ZFA-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(s32) = G_INTRINSIC_ROUNDEVEN [[COPY]]
    ; CHECK-ZFA-NEXT: $f10_f = COPY [[INTRINSIC_ROUNDEVEN]](s32)
    ; CHECK-ZFA-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-F-ONLY-LABEL: name: INTRINSIC_ROUNDEVEN
    ; CHECK-F-ONLY: liveins: $f10_f
    ; CHECK-F-ONLY-NEXT: {{  $}}
    ; CHECK-F-ONLY-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoCALL target-flags(riscv-call) &roundevenf, csr_ilp32f_lp64f, implicit-def $x1, implicit $f10_f, implicit-def $f10_f
    ; CHECK-F-ONLY-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-F-ONLY-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $f10_f
    ; CHECK-F-ONLY-NEXT: $f10_f = COPY [[COPY1]](s32)
    ; CHECK-F-ONLY-NEXT: PseudoRET implicit $f10_f
    %0:_(s32) = COPY $f10_f
    %1:_(s32) = G_INTRINSIC_ROUNDEVEN %0
    $f10_f = COPY %1
    PseudoRET implicit $f10_f

...
